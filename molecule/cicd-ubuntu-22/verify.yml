---
# Don't forget to keep this file updated
# molecule/<scenario>/verify.yml
- name: "Verify"
  hosts: "cicd-ubuntu-22"
  gather_facts: false
  tasks:

    - name: "Verify MARIADB"
      when: inv_install_mariadb | default(false)
      block:
        - name: "Get MariaDB service current state"
          register: install_mariadb__service_status
          failed_when: not install_mariadb__service_status.status.ActiveState == 'active'
          ansible.builtin.systemd:
            name: "mariadb"

        - name: "Check MariaDB configuration file"
          register: file_stat
          failed_when: not file_stat.stat.exists
          ansible.builtin.stat:
            path: "{{ inv_install_mariadb__config_path }}/50-server.cnf"

        - name: "Check Mariadb connectivity"
          ansible.builtin.wait_for:
            host: "{{ inventory_hostname }}"
            port: "{{ inv_install_mariadb__port }}"
            timeout: 120

        - name: "Check Cluster health"
          when: inv_install_mariadb__galera_cluster | default(false)
          block:
            - name: "Check Galera replciation connectivities"
              loop: "{{ inv_install_mariadb__galera_node_list }}"
              loop_control:
                loop_var: node
              ansible.builtin.wait_for:
                host: "{{ node }}"
                port: "4567"
                timeout: 120

            - name: Set expected cluster size
              ansible.legacy.set_fact:
                expected_cluster_size: "{{ inv_install_mariadb__galera_node_list | length }}"

            - name: "Get Galera Cluster Size from MySQL"
              register: galera_cluster_size_result
              failed_when: galera_cluster_size_result.stdout != expected_cluster_size
              changed_when: galera_cluster_size_result.rc != 0
              ansible.builtin.shell: "mysql -u root --password='{{ inv_install_mariadb__secure_root_password }}' --execute=\"SHOW STATUS LIKE 'wsrep_cluster_size';\" | grep -oP '\\d+'"

            - name: "Get Galera Cluster State from MySQL"
              register: galera_cluster_synced_result
              failed_when: galera_cluster_synced_result.stdout_lines[1] != "wsrep_local_state_comment\tSynced"
              changed_when: galera_cluster_synced_result.rc != 0
              ansible.builtin.command: "mysql -u root --password='{{ inv_install_mariadb__secure_root_password }}' --execute=\"SHOW STATUS LIKE 'wsrep_local_state_comment';\""

    - name: "Verify MAXSCALE"
      when: inv_install_maxscale | default(false)
      block:
        - name: "Get MaxScale service current state"
          register: install_maxscale__service_status
          failed_when: not install_maxscale__service_status.status.ActiveState == 'active'
          ansible.builtin.systemd:
            name: "maxscale"

        - name: "Check databases, with the MaxScale proxy and user"
          register: output
          changed_when: output.rc != 0
          vars:
            ssl_option: "{{ '' if not inv_install_maxscale__listener_server_ssl | default(false) else '--ssl --ssl-ca=' ~ inv_install_maxscale__listener_server_ssl_ca }}"
            mtls_options: "{{ '' if not inv_install_maxscale__mariadb_server_ssl_client_auth | default(false) else '--ssl-cert=' ~ inv_install_maxscale__listener_server_ssl_cert ~ ' --ssl-key=' ~ inv_install_maxscale__listener_server_ssl_key }}"
            host_options: "-h localhost -P {{ inv_install_maxscale__listener_server_port }}"
          ansible.builtin.shell: |
            mysql {{ host_options | default('') }} {{ ssl_option | default('') }} {{ mtls_options | default('') }} -u {{ inv_install_maxscale__database_user_login }} --password='{{ inv_install_maxscale__database_user_password }}' --execute="SHOW DATABASES;"

        - name: "Check MaxScale admin GUI"
          when: (inv_install_maxscale__admin_enabled | default(false)) and (inv_install_maxscale__admin_gui | default(false))
          block:
            - name: "Check MaxScale connectivity"
              ansible.builtin.wait_for:
                host: "{{ inventory_hostname }}"
                port: "{{ inv_install_maxscale__admin_port }}"
                timeout: 120

            - name: "Check MaxScale HTTP"
              register: result
              when: not (inv_install_maxscale__admin_secure_gui | default(false))
              failed_when: result.status != 200
              ansible.builtin.uri:
                url: "http://{{ inventory_hostname }}:{{ inv_install_maxscale__admin_port }}/"
                method: "GET"

            - name: "Check MaxScale HTTPS"
              when: inv_install_maxscale__admin_secure_gui | default(false)
              register: result
              failed_when: result.status != 200
              ansible.builtin.uri:
                url: "https://{{ inventory_hostname }}:{{ inv_install_maxscale__admin_port }}/"
                method: "GET"
